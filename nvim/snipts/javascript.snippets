
global !p
fn_base = fn.split(os.extsep)[0];
lower_first = lambda s: s[:1].lower() + s[1:] if s else ''
endglobal

# -------------- r (react)
snippet rcf "React Component"
// @flow
/**
 * core packages
 */
import React from 'react';
import PropTypes from 'prop-types';
${1:}
/**
 * third party packages
 */

import css from 'react-css-modules';
${2:}

/**
 * internal packages
 */
${3:}
import styles from './styles/`!p snip.rv = fn_base + '.bemcss'`';

/**
 * @namespace `!p snip.rv = fn_base.capitalize()`
 * @memberof ${3:}
 *
 * @classdesc `!p snip.rv = fn_base.capitalize()` Component     -- ${4:}
 *
 * @returns Virtual DOM
 *
 */

const `!p snip.rv = fn_base.capitalize()` = (props) => {
  return (
    ${5:<div>

    </div>}
  );
}

const {
  shape,
  func,
  string,
  number,
  arrayOf,
} = PropTypes;

/**
 *  @property { ${6:} } ${7:}               -- represents filter fragment of query string
 */

`!p snip.rv = fn_base.capitalize() + '.'`propTypes = {
  id: string.isRequired,
		${8:}
}

/**
 *  @property { ${10:} } ${11:}               -- represents filter fragment of query string
 */
`!p snip.rv = fn_base.capitalize() + '.'`defaultProps = {
		${12: }
}

export default css(`!p snip.rv = fn_base.capitalize()`, styles);
endsnippet

# -------------- r (react)
snippet rc "React Component"
// @flow
/**
 * core packages
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
${1:}
/**
 * third party packages
 */
import css from 'react-css-modules';
${2:}

/**
 * internal packages
 */
${3:}
import styles from './styles/`!p snip.rv = fn_base + '.bemcss'`';

const {
  shape,
  func,
  string,
  number,
  arrayOf,
} = PropTypes;

/**
 * @namespace `!p snip.rv = fn_base.capitalize()`
 * @memberof ${4:}
 *
 * @classdesc `!p snip.rv = fn_base.capitalize()` Component     -- ${5:}
 *
 * @returns Virtual DOM
 *
 */

class `!p snip.rv = fn_base.capitalize()` extends Component {
  static contextTypes = {
    router: shape({
      push: func.isRequired,
    }).isRequired,
	  ${6:}
  }

  static propTypes = {
    id: string.isRequired,
	  ${7:}
  }

  static defaultProps = {
	  ${8:}
	}

	constructor(props) {
		super(props);
	  ${9:}
	}

	componentDidMount() {
	  ${10:}
	}

	render() {
	  ${11:}
		return (
		  ${6:<div>

		  </div>}
		);
	}
}

export default css(`!p snip.rv = fn_base.capitalize()`, styles);
endsnippet

# -------------- m (mocha)
snippet mocha "mocha snippet"
// @flow

// core libraries
import React from 'react';

// core test libraries
import { describe, context, it } from 'mocha';
import expect from 'expect';
import { mount, shallow } from 'enzyme';

// sut - component under test
import ${1:} from '${2:}';

${0:}
endsnippet

snippet describe "mocha describe"
/** @test ${1:} */
describe('$2', function(${3:}) {

  ${0:}

});
endsnippet

snippet context "mocha context"
/** @test ${1:} */
context('$2', function(${3:}) {

  ${0:}

});
endsnippet


snippet it "mocha it"
/** @test ${1:} */
it('$2', function(${3:}) {

  expect($4).$5;
  ${0:}

});
endsnippet
